from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from data.users_data import users
from datetime import datetime

class LogWaterStates(StatesGroup):
    waiting_for_amount = State()

async def cmd_log_water(message: Message, command: CommandObject, state: FSMContext):
    """
    /log_water (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) -> –±–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª–∏?"
    /log_water <–∫–æ–ª-–≤–æ> -> —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    """
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /set_profile.")
        return

    if not command.args:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã?"
        await message.answer("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã (–º–ª) –≤—ã –≤—ã–ø–∏–ª–∏?")
        await state.set_state(LogWaterStates.waiting_for_amount)
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        try:
            amount = int(command.args)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 250")
            return

        await log_water_and_reply(message, amount)

async def water_amount_entered(message: Message, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å "–°–∫–æ–ª—å–∫–æ –º–ª?"
    """
    user_id = message.from_user.id
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 250.")
        return

    await log_water_and_reply(message, amount)
    await state.clear()

async def log_water_and_reply(message: Message, amount: int):
    user_id = message.from_user.id
    users[user_id]["logged_water"] += amount

    # –ó–∞–ø–∏—à–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    users[user_id]["log_history"].append({
        "timestamp": datetime.now(),
        "type": "water",
        "amount": amount  # –º–ª
    })

    current = users[user_id]["logged_water"]
    goal = users[user_id]["water_goal"]

    text = (
        f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã.\n"
        f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {current} –º–ª –∏–∑ {goal} –º–ª."
    )
    if current >= goal:
        text += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã. üèÜ"
    else:
        left = goal - current
        text += f"\n–û—Å—Ç–∞–ª–æ—Å—å {left} –º–ª –¥–æ —Ü–µ–ª–∏."

    await message.answer(text)

def register_log_water_handlers(dp: Dispatcher):
    dp.message.register(cmd_log_water, Command(commands=["log_water"]))
    dp.message.register(water_amount_entered, LogWaterStates.waiting_for_amount)