from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile

from data.users_data import users
from services.plots import generate_progress_plot

async def cmd_check_progress(message: Message):
    """
    /check_progress
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏ –≥—Ä–∞—Ñ–∏–∫ (png)
    """
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /set_profile.")
        return

    u = users[user_id]
    water_goal = u["water_goal"]
    logged_water = u["logged_water"]
    cal_goal = u["calorie_goal"]
    cal_logged = u["logged_calories"]
    cal_burned = u["burned_calories"]

    text = (f"<b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
            f"üíß –í–æ–¥–∞:\n"
            f"–í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_goal - logged_water)} –º–ª.\n\n"

            f"üçî –ö–∞–ª–æ—Ä–∏–∏:\n"
            f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {cal_logged:.1f} –∏–∑ {cal_goal} –∫–∫–∞–ª.\n"
            f"–°–æ–∂–∂–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏: {cal_burned:.1f} –∫–∫–∞–ª.\n"
            f"–ë–∞–ª–∞–Ω—Å (–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ - —Å–æ–∂–∂–µ–Ω–æ): {(cal_logged - cal_burned):.1f} –∫–∫–∞–ª.\n\n"
            f"–ù–∏–∂–µ ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:"
            )

    await message.answer(text)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    plot_path = generate_progress_plot(u)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await message.answer_photo(photo=FSInputFile(plot_path))

def register_check_progress_handlers(dp: Dispatcher):
    dp.message.register(cmd_check_progress, Command(commands=["check_progress"]))